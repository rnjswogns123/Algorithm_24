#include <stdio.h>
#include <limits.h>

#define INF 99999
#define V 6

void printSolution(int dist[][V]);

void floydWarshall(int graph[][V]) {
    int dist[V][V], i, j, k;

    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }

        printf("Intermediate distances after including vertex %d:\n", k);
        printSolution(dist);
        printf("\n");
    }

    printf("Final shortest distances between every pair of vertices:\n");
    printSolution(dist);
}

void printSolution(int dist[][V]) {
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF) {
                printf("%7s", "INF");
            }
            else {
                printf("%7d", dist[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    int graph[V][V] = {
        {0, INF, 7, 9, INF, 14},
        {INF, 0, 10, 15, INF, INF},
        {7, 10, 0, 11, INF, INF},
        {9, 15, 11, 0, 6, INF},
        {INF, INF, INF, 6, 0, 9},
        {14, INF, INF, INF, 9, 0}
    };

    printf("Initial graph:\n");
    printSolution(graph);
    printf("\n");

    floydWarshall(graph);

    return 0;
}
